# ============================================
# Makefile - API Mobile (EduGo)
# ============================================

# Variables
APP_NAME=api-administracion
VERSION=$(shell git describe --tags --always --dirty 2>/dev/null || echo "dev")
BUILD_DIR=bin
COVERAGE_DIR=coverage
MAIN_PATH=./cmd/main.go

# Go commands
GOCMD=go
GOBUILD=$(GOCMD) build
GOTEST=$(GOCMD) test
GOMOD=$(GOCMD) mod
GOFMT=gofmt
GOVET=$(GOCMD) vet

# Build flags
LDFLAGS=-ldflags "-X main.Version=$(VERSION) -X main.BuildTime=$(shell date -u +%Y-%m-%dT%H:%M:%SZ)"

# Colors
YELLOW=\033[1;33m
GREEN=\033[1;32m
BLUE=\033[1;34m
RED=\033[1;31m
RESET=\033[0m

# Environment variables con defaults
export APP_ENV ?= local
export POSTGRES_PASSWORD ?= edugo_pass
export MONGODB_URI ?= mongodb://edugo_admin:edugo_pass@localhost:27017/edugo?authSource=admin

.DEFAULT_GOAL := help

# ============================================
# Main Targets
# ============================================

help: ## Mostrar esta ayuda
	@echo "$(BLUE)$(APP_NAME) - Comandos disponibles:$(RESET)"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-20s$(RESET) %s\n", $$1, $$2}'

build: ## Compilar binario
	@echo "$(YELLOW)üî® Compilando $(APP_NAME)...$(RESET)"
	@mkdir -p $(BUILD_DIR)
	@$(GOBUILD) $(LDFLAGS) -o $(BUILD_DIR)/$(APP_NAME) $(MAIN_PATH)
	@echo "$(GREEN)‚úì Binario: $(BUILD_DIR)/$(APP_NAME) ($(VERSION))$(RESET)"

run: ## Ejecutar en modo desarrollo
	@echo "$(YELLOW)üöÄ Ejecutando $(APP_NAME) (ambiente: $(APP_ENV))...$(RESET)"
	@$(GOCMD) run $(MAIN_PATH)

dev: deps swagger run ## Desarrollo completo

# ============================================
# Testing
# ============================================

test: ## Ejecutar todos los tests
	@echo "$(YELLOW)üß™ Ejecutando tests...$(RESET)"
	@$(GOTEST) -v -race ./...
	@echo "$(GREEN)‚úì Tests completados$(RESET)"

test-coverage: ## Tests con cobertura (HTML report)
	@echo "$(YELLOW)üìä Generando reporte de cobertura...$(RESET)"
	@mkdir -p $(COVERAGE_DIR)
	@$(GOTEST) -v -race -coverprofile=$(COVERAGE_DIR)/coverage.out -covermode=atomic ./...
	@$(GOCMD) tool cover -html=$(COVERAGE_DIR)/coverage.out -o $(COVERAGE_DIR)/coverage.html
	@$(GOCMD) tool cover -func=$(COVERAGE_DIR)/coverage.out | tail -1
	@echo "$(GREEN)‚úì Reporte: $(COVERAGE_DIR)/coverage.html$(RESET)"
	@echo "$(BLUE)üí° Abrir: open $(COVERAGE_DIR)/coverage.html$(RESET)"

test-unit: ## Solo tests unitarios
	@$(GOTEST) -v -short ./...

test-integration: ## Tests de integraci√≥n (con testcontainers)
	@echo "$(YELLOW)üê≥ Tests de integraci√≥n...$(RESET)"
	@$(GOTEST) -v -tags=integration ./test/integration/... -timeout 5m

benchmark: ## Ejecutar benchmarks
	@echo "$(YELLOW)‚ö° Ejecutando benchmarks...$(RESET)"
	@$(GOTEST) -bench=. -benchmem ./...

# ============================================
# Code Quality
# ============================================

fmt: ## Formatear c√≥digo
	@echo "$(YELLOW)‚ú® Formateando c√≥digo...$(RESET)"
	@$(GOFMT) -w .
	@echo "$(GREEN)‚úì C√≥digo formateado$(RESET)"

vet: ## An√°lisis est√°tico
	@echo "$(YELLOW)üîç Ejecutando go vet...$(RESET)"
	@$(GOVET) ./...
	@echo "$(GREEN)‚úì An√°lisis est√°tico completado$(RESET)"

lint: ## Linter completo
	@echo "$(YELLOW)üîé Ejecutando golangci-lint...$(RESET)"
	@golangci-lint run --timeout=5m || echo "$(YELLOW)‚ö†Ô∏è  Instalar con: make tools$(RESET)"

audit: ## Auditor√≠a de calidad completa
	@echo "$(BLUE)=== üîê AUDITOR√çA ===$(RESET)"
	@echo "$(YELLOW)1. Verificando go.mod...$(RESET)"
	@$(GOMOD) verify
	@echo "$(YELLOW)2. Formato...$(RESET)"
	@test -z "$$($(GOFMT) -l .)" || (echo "$(RED)Sin formatear:$(RESET)" && $(GOFMT) -l .)
	@echo "$(YELLOW)3. Vet...$(RESET)"
	@$(GOVET) ./...
	@echo "$(YELLOW)4. Tests...$(RESET)"
	@$(GOTEST) -race -vet=off ./...
	@echo "$(GREEN)‚úì Auditor√≠a completada$(RESET)"

# ============================================
# Dependencies
# ============================================

deps: ## Descargar dependencias
	@echo "$(YELLOW)üì¶ Instalando dependencias...$(RESET)"
	@$(GOMOD) download
	@echo "$(GREEN)‚úì Dependencias listas$(RESET)"

tidy: ## Limpiar go.mod
	@echo "$(YELLOW)üßπ Limpiando go.mod...$(RESET)"
	@$(GOMOD) tidy
	@echo "$(GREEN)‚úì go.mod actualizado$(RESET)"

tools: ## Instalar herramientas
	@echo "$(YELLOW)üõ†Ô∏è  Instalando herramientas...$(RESET)"
	@go install github.com/swaggo/swag/cmd/swag@latest
	@go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
	@echo "$(GREEN)‚úì Herramientas instaladas$(RESET)"

# ============================================
# Swagger
# ============================================

swagger: ## Regenerar Swagger
	@echo "$(YELLOW)üìö Regenerando Swagger...$(RESET)"
	@swag init -g cmd/main.go -o docs --parseInternal
	@echo "$(GREEN)‚úì Swagger: http://localhost:8081/swagger/index.html$(RESET)"

# ============================================
# Docker
# ============================================

docker-build: ## Build imagen
	@echo "$(YELLOW)üê≥ Building...$(RESET)"
	@docker build -t edugo/$(APP_NAME):$(VERSION) .
	@echo "$(GREEN)‚úì Imagen: edugo/$(APP_NAME):$(VERSION)$(RESET)"

docker-run: ## Run con compose
	@docker-compose up -d
	@echo "$(GREEN)‚úì Corriendo en http://localhost:8081$(RESET)"

docker-stop: ## Stop compose
	@docker-compose down

docker-logs: ## Ver logs
	@docker-compose logs -f

# ============================================
# CI/CD
# ============================================

ci: audit test-coverage swagger ## CI pipeline
	@echo "$(GREEN)‚úÖ CI completado$(RESET)"

pre-commit: fmt vet test ## Pre-commit hook

# ============================================
# Cleanup
# ============================================

clean: ## Limpiar todo
	@rm -rf $(BUILD_DIR) $(COVERAGE_DIR)
	@$(GOCMD) clean -cache -testcache
	@echo "$(GREEN)‚úì Limpieza completa$(RESET)"

# ============================================
# Meta
# ============================================

all: clean deps fmt vet swagger test build ## Build completo
	@echo "$(GREEN)üéâ Build completo$(RESET)"

info: ## Info del proyecto
	@echo "$(BLUE)üìã $(APP_NAME)$(RESET)"
	@echo "  Versi√≥n: $(VERSION)"
	@echo "  Ambiente: $(APP_ENV)"
	@echo "  Go: $$($(GOCMD) version)"

.PHONY: help build run dev test test-coverage test-unit test-integration benchmark fmt vet lint audit deps tidy tools swagger docker-build docker-run docker-stop docker-logs ci pre-commit clean all info
